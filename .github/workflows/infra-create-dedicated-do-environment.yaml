name: Create dedicated DO environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment for which to create resources'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - development
          - production
      region:
        description: 'Select the region for the database cluster'
        required: true
        default: 'fra1'
        type: choice
        options:
          - fra1  # Frankfurt
          - nyc1  # New York 1
          - nyc2  # New York 2
          - sfo1  # San Francisco 1
          - lon1  # London 1
      num_nodes:
        description: 'Select the number of nodes for the database cluster'
        required: true
        default: '1'
        type: choice
        options:
          - 1
          - 2
          - 3
          - 4
      size:
        description: 'Select the machine size for the database cluster'
        required: true
        default: 'db-s-1vcpu-1gb'
        type: choice
        options:
          - db-s-1vcpu-1gb  # Basic - $15/mo
          - db-s-1vcpu-2gb  # Basic - $25/mo
          - db-s-2vcpu-4gb  # Basic - $50/mo
          - db-s-4vcpu-8gb  # Professional - $120/mo
      engine:
        description: 'Select the database engine'
        required: true
        default: 'pg'
        type: choice
        options:
          - pg
          - mysql
          - redis
      version:
        description: 'Select the PostgreSQL database version'
        required: true
        default: '16'
        type: choice
        options:
          - "15"
          - "16"
      app_id:
        description: 'The DO UUID of the app to update'
        required: true

jobs:
  setup_cluster:
    name: 'Create and Setup Database Cluster'
    runs-on: ubuntu-latest
    outputs:
      skip_wait: ${{ steps.check_cluster.outputs.skip_wait }}
      cluster_ready: ${{ steps.check_final.outputs.cluster_ready }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create Database Cluster
        id: create_cluster
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          REGION=${{ github.event.inputs.region }}
          SIZE=${{ github.event.inputs.size }}
          NUM_NODES=${{ github.event.inputs.num_nodes }}
          ENGINE=${{ github.event.inputs.engine }}
          VERSION=${{ github.event.inputs.version }}
          ./infra/infra_create_environment_database_cluster.sh "$ENVIRONMENT" "$REGION" "$SIZE" "$NUM_NODES" "$ENGINE" "$VERSION"

      - name: Check Cluster Status
        id: check_cluster
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          CLUSTER_NAME="${ENVIRONMENT}-cluster"
          
          STATUS=$(doctl databases list --format Name,Status --no-header | grep "^${CLUSTER_NAME}" | awk '{print $2}')
          
          if [ "$STATUS" = "online" ]; then
            echo "Cluster is already online, skipping wait"
            echo "skip_wait=true" >> $GITHUB_OUTPUT
          else
            echo "Cluster is still provisioning"
            echo "skip_wait=false" >> $GITHUB_OUTPUT
          fi

      - name: Wait for Cluster Provisioning
        id: create_cluster_wait
        if: steps.check_cluster.outputs.skip_wait != 'true'
        run: |
          echo "Waiting for 5 minutes for the database cluster to be provisioned..."
          sleep 300

      - name: Final Cluster Check
        id: check_final
        run: |
          if [[ "${{ steps.check_cluster.outputs.skip_wait }}" == "true" ]] || [[ "${{ steps.create_cluster_wait.outcome }}" == "success" ]]; then
            echo "cluster_ready=true" >> $GITHUB_OUTPUT
          else
            echo "cluster_ready=false" >> $GITHUB_OUTPUT
          fi

  setup_database:
    name: 'Setup Database and Permissions'
    needs: setup_cluster
    if: needs.setup_cluster.outputs.cluster_ready == 'true'
    runs-on: ubuntu-latest
    outputs:
      database_ready: ${{ steps.check_database.outputs.database_ready }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create Dedicated Database
        id: create_database
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          ./infra/infra_create_environment_dedicated_cluster_database.sh "$ENVIRONMENT"

      - name: Add minimal migration permissions
        id: create_migration_user
        if: steps.create_database.outcome == 'success'
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          ./infra/infra_create_environment_dedicated_database_add_minimal_migration_permissions.sh "$ENVIRONMENT"

      - name: Check Database Setup
        id: check_database
        run: |
          if [[ "${{ steps.create_migration_user.outcome }}" == "success" ]]; then
            echo "database_ready=true" >> $GITHUB_OUTPUT
          else
            echo "database_ready=false" >> $GITHUB_OUTPUT
          fi

  update_app:
    name: 'Update App Configuration'
    needs: setup_database
    if: needs.setup_database.outputs.database_ready == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Update App Spec
        run: |
          APP_ID=${{ github.event.inputs.app_id }}
          ENVIRONMENT=${{ github.event.inputs.environment }}
          ./infra/infra_app_spec_update.sh "$APP_ID" "$ENVIRONMENT"